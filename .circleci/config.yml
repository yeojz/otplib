aliases:
  - &restore_test_cache
    keys:
      - test-{{ .Environment.PROJECT_CACHE_VERSION }}-{{ .Branch }}-{{ .Environment.CIRCLE_JOB }}-{{ checksum "package-lock.json" }}

  - &save_test_cache
    paths:
      - ./node_modules
    key: test-{{ .Environment.PROJECT_CACHE_VERSION }}-{{ .Branch }}-{{ .Environment.CIRCLE_JOB }}-{{ checksum "package-lock.json" }}

  - &restore_release_cache
    keys:
      - release-{{ .Environment.PROJECT_CACHE_VERSION }}-{{ checksum "package-lock.json" }}

  - &save_release_cache
    paths:
      - ./node_modules
    key: release-{{ .Environment.PROJECT_CACHE_VERSION }}-{{ checksum "package-lock.json" }}

  - &install_npm
    name: install dependencies with extras
    command: |
      npm run setup

  - &install_npm_node8
    name: install dependencies
    command: |
      OTPLIB_SETUP_TYPE=node8 npm run setup

  - &build_package
    name: build package
    command: |
      npm run clean
      npm run build

  - &filter_common
    branches:
      ignore: gh-pages
    tags:
      ignore: /.*/

  - &filter_tag_all
    tags:
      only: /^v.*/
    branches:
      ignore: /.*/

  - &filter_tag_stable
    tags:
      only: /^v[0-9]+(\.[0-9]+)*$/
    branches:
      ignore: /.*/

  - &filter_tag_beta
    tags:
      only: /^v[0-9]+(\.[0-9]+)*\-[0-9]+$/
    branches:
      ignore: /.*/

  - &node_tests
    working_directory: ~/project
    steps:
      - checkout
      - restore-cache: *restore_test_cache
      - run: *install_npm
      - save_cache: *save_test_cache
      - run: *build_package
      - run:
          name: test
          command: npm run test:module

  - &defaults
    working_directory: ~/project
    docker:
      - image: circleci/node:10

  - &npm_publish
    steps:
      - checkout
      - restore-cache: *restore_release_cache
      - run: *install_npm
      - save_cache: *save_release_cache
      - run:
          name: build for npm
          command: |
            npm run clean
            npm run build
      - run:
          working_directory: ~/project/builds/otplib
          name: publish to npm
          command: |
            echo "npm tag = $RUNTIME_NPM_TAG"

            if [ -z "$CIRCLE_PULL_REQUEST" ]; then
              echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" > ~/.npmrc
              npm publish --tag $RUNTIME_NPM_TAG

              {
                npm run update:release-notes
              } || {
                echo "unable to update release notes."
              }

            else
              echo "skipping publication."
            fi

version: 2
jobs:
  node_v8:
    docker:
      - image: circleci/node:8
    steps:
      - checkout
      - restore-cache: *restore_test_cache
      - run: *install_npm_node8
      - save_cache: *save_test_cache
      - run: *build_package
      - run:
          name: test
          command: npm run test:node8
  node_v10:
    <<: *defaults
    steps:
      - checkout
      - restore-cache: *restore_test_cache
      - run: *install_npm
      - save_cache: *save_test_cache
      - run: *build_package
      - run:
          name: test
          command: npm run test:module
      - run:
          name: lint
          command: |
            npm run lint
      - run:
          name: send coverage report
          command: |
            if [[ $CIRCLE_PROJECT_USERNAME == $PROJECT_OWNER_NAME ]]; then
              {
                npm run upload:coverage
              } || {
                echo "unable to update coverage."
              }
            else
              echo "skipping coverage uploading."
            fi
          when: on_success

  node_v12:
    docker:
      - image: circleci/node:12
    <<: *node_tests

  publish_npm_stable:
    environment:
      RUNTIME_NPM_TAG: latest
    <<: *defaults
    <<: *npm_publish

  publish_npm_beta:
    environment:
      RUNTIME_NPM_TAG: next
    <<: *defaults
    <<: *npm_publish

  deploy_website:
    <<: *defaults
    steps:
      - checkout
      - restore-cache: *restore_release_cache
      - run: *install_npm
      - save_cache: *save_release_cache
      - run:
          name: configure git user
          command: |
            git config --global user.email $PROJECT_DEPLOY_EMAIL
            git config --global user.name $PROJECT_DEPLOY_NAME
      - run:
          working_directory: ~/project/site
          name: deploying website
          command: |
            if [[ $CIRCLE_PROJECT_USERNAME == $PROJECT_OWNER_NAME && -z $CI_PULL_REQUEST && -z $CIRCLE_PR_USERNAME ]]; then
              npm install
              npm run build:deps
              npm run build
              npm run deploy
            else
              echo "skipping deploy."
            fi

workflows:
  version: 2
  dev-builds:
    jobs:
      - node_v8:
          filters: *filter_common
      - node_v10:
          filters: *filter_common
      - node_v12:
          filters: *filter_common
  release-builds:
    jobs:
      - node_v8:
          filters: *filter_tag_all
      - node_v10:
          filters: *filter_tag_all
      - node_v12:
          filters: *filter_tag_all
      - hold_website:
          type: approval
          requires:
            - node_v8
            - node_v10
            - node_v12
          filters: *filter_tag_stable
      - deploy_website:
          requires:
            - hold_website
          filters: *filter_tag_stable
      - publish_npm_beta:
          requires:
            - node_v8
            - node_v10
            - node_v12
          filters: *filter_tag_beta
      - hold_npm:
          type: approval
          requires:
            - node_v8
            - node_v10
            - node_v12
          filters: *filter_tag_stable
      - publish_npm_stable:
          requires:
            - hold_npm
          filters: *filter_tag_stable

